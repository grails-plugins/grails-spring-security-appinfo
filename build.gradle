buildscript {
	ext {
		grailsVersion = project.grailsVersion
	}
	repositories {
		mavenLocal()
		maven { url 'https://repo.grails.org/grails/core' }
	}
	dependencies {
		classpath "org.grails:grails-gradle-plugin:$grailsVersion"
		classpath "org.grails:grails-docs:$grailsVersion"
	}
}

plugins {
	id 'io.spring.dependency-management' version '0.5.2.RELEASE'
	id 'com.jfrog.bintray' version '1.2'
}

version '3.0.0.M1'
group 'org.grails.plugins'

apply plugin: 'maven-publish'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'org.grails.grails-plugin'
apply plugin: 'org.grails.grails-gsp'
apply plugin: 'org.grails.grails-doc'

String repoRoot = 'https://raw.githubusercontent.com/grails/grails-profile-repository/master/profiles/plugin/templates'
apply from: "$repoRoot/grailsCentralPublishing.gradle"
//apply from: "$repoRoot/bintrayPublishing.gradle"
apply from: 'bintrayPublishing.gradle' // using modified local copy so the issueTrackerUrl and vcsUrl properties are correct

ext {
	grailsVersion = project.grailsVersion
	gradleWrapperVersion = project.gradleWrapperVersion
}

sourceCompatibility = targetCompatibility = 1.7

repositories {
	mavenLocal()
	mavenCentral()
	maven { url 'https://repo.grails.org/grails/core' }
}

dependencyManagement {
	imports {
		mavenBom "org.grails:grails-bom:$grailsVersion"
	}
	applyMavenExclusions false
}

dependencies {

	provided 'javax.servlet:javax.servlet-api:3.1.0'
	provided 'org.grails:grails-dependencies'
	provided 'org.grails:grails-web-boot'
	provided 'org.springframework.boot:spring-boot-autoconfigure'

	compile 'org.grails.plugins:spring-security-core:3.0.0.M1'

	testCompile 'org.grails:grails-plugin-testing'

	console 'org.grails:grails-console'
}

docs.doLast {

	// can't do this in custom css because the order doesn't support overriding, only adding
	File mainCss = new File(project.buildDir, 'docs/manual/css/main.css')
	mainCss.text = mainCss.text.replaceAll('font-size: 85%', 'font-size: 100%;')

	// delete unused images
	['pivotal-logo-color', 'pivotal-logo', 'springsource-logo', 'grails-icon', 'grails', 'groovy'].each { String name ->
		assert new File(project.buildDir, 'docs/manual/img/' + name + '.png').delete()
	}
	assert new File(project.buildDir, 'docs/manual/img/favicon.ico').delete()
}

task docsWithPdf(dependsOn: 'docs') << {
	// based on grails.doc.gradle.PublishPdf
	def outputDir = new File(project.buildDir, 'docs/manual')
	def htmlFile = new File(outputDir, 'guide/single.html')
	def pdfBuilder = new grails.doc.PdfBuilder()
	def xml = pdfBuilder.createXml(htmlFile, outputDir.absolutePath)
	pdfBuilder.createPdf xml, new File(htmlFile.parentFile, 'single.pdf'), htmlFile
}

task wrapper(type: Wrapper) {
	gradleVersion = gradleWrapperVersion
}

eclipse {
	classpath {
		plusConfigurations += [configurations.provided]
	}
}

idea {
	module {
		scopes.PROVIDED.plus += [configurations.provided]
	}
}
